/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Http, Headers } from '@angular/http';
import { map, retry } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
var FlxUiDatatableService = /** @class */ (function () {
    function FlxUiDatatableService(http) {
        this.http = http;
        this.dataUrl = '';
        this.behavior = new BehaviorSubject([]);
        this.flxData = this.behavior.asObservable();
        this.pagination = [];
        this.totalItems = 0;
        this.dataOffset = 0;
        this.limit = 20;
        this.dataSrcKey = '';
        //Hold items selected for multiple select
        this.multipleDeletion = [];
        //Keep track if API call is completed
        this.loadFinish = false;
        this.lazyloadingConfig = {};
    }
    /**
     * @param {?} config
     * @return {?}
     */
    FlxUiDatatableService.prototype.setLazyloadingConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.lazyloadingConfig = config;
    };
    /**
     *
     * @param {?} url User api rul
     * @return {?}
     */
    FlxUiDatatableService.prototype.getData = /**
     *
     * @param {?} url User api rul
     * @return {?}
     */
    function (url) {
        var /** @type {?} */ headers = new Headers();
        headers.append('Content-Type', 'application/x-www-form-urlencoded');
        return this.http.get(url, { headers: headers }).pipe(retry(5), map(function (response) { return response.json(); }));
    };
    /**
     *
     * @param {?} url Service api url
     * @param {?} id Datatype id to export
     * @param {?} data Data to export
     * @return {?}
     */
    FlxUiDatatableService.prototype.postData = /**
     *
     * @param {?} url Service api url
     * @param {?} id Datatype id to export
     * @param {?} data Data to export
     * @return {?}
     */
    function (url, id, data) {
        var /** @type {?} */ headers = new Headers();
        headers.append('Content-Type', 'application/json; charset=utf-8');
        return this.http.post(url + id, data, { headers: headers }).pipe(map(function (resp) { return resp.json(); }));
    };
    /**
     *
     * @param {?} dataUrl Set dataurl
     * @return {?}
     */
    FlxUiDatatableService.prototype.setDataUrl = /**
     *
     * @param {?} dataUrl Set dataurl
     * @return {?}
     */
    function (dataUrl) {
        this.dataUrl = dataUrl;
    };
    /**
     * @return {?}
     */
    FlxUiDatatableService.prototype.getDataUrl = /**
     * @return {?}
     */
    function () {
        return this.dataUrl;
    };
    /**
     *
     * @param {?} data Register new data from user API
     * @return {?}
     */
    FlxUiDatatableService.prototype.chageDataTable = /**
     *
     * @param {?} data Register new data from user API
     * @return {?}
     */
    function (data) {
        this.behavior.next(data);
    };
    /**
     *
     * @param {?} numberOfList Total number of list
     * @param {?} limit Pagination limit
     * @return {?}
     */
    FlxUiDatatableService.prototype.createPagination = /**
     *
     * @param {?} numberOfList Total number of list
     * @param {?} limit Pagination limit
     * @return {?}
     */
    function (numberOfList, limit) {
        var /** @type {?} */ obj = [];
        var /** @type {?} */ counter = 1;
        for (var /** @type {?} */ i = 0; i < numberOfList; i += limit) {
            obj.push({ label: counter, value: i });
            counter++;
        }
        if (!this.isLazyLoadingEnabled) {
            obj.push({ label: 'All', value: 'all' });
        }
        return obj;
    };
    /**
     * @return {?}
     */
    FlxUiDatatableService.prototype.isLazyLoadingEnabled = /**
     * @return {?}
     */
    function () {
        return this.lazyloadingConfig.hasOwnProperty("apiOffsetKey") && this.lazyloadingConfig.apiOffsetKey;
    };
    /**
     * @param {?} dataUrl
     * @param {?=} setSelectPagination
     * @return {?}
     */
    FlxUiDatatableService.prototype.loadFlxDataTableData = /**
     * @param {?} dataUrl
     * @param {?=} setSelectPagination
     * @return {?}
     */
    function (dataUrl, setSelectPagination) {
        var _this = this;
        if (setSelectPagination === void 0) { setSelectPagination = true; }
        this.loadFinish = false;
        this.loader = this.getData(dataUrl).subscribe(function (responseData) {
            try {
                _this.multipleDeletion = [];
                var /** @type {?} */ data = (_this.dataSrcKey) ? responseData[_this.dataSrcKey] : responseData;
                _this.chageDataTable(data);
                if (_this.isLazyLoadingEnabled()) {
                    _this.totalItems = responseData.total;
                    // Handle 1 pagination out of zero problem 1/0  instead of 0/0 if no data is comming
                    if (data.length > 0) {
                        _this.dataOffset = _this.dataOffset + _this.limit;
                    }
                }
                else {
                    _this.totalItems = data.length;
                    _this.dataOffset = 1;
                }
                if (setSelectPagination) {
                    if (_this.isLazyLoadingEnabled()) {
                        _this.pagination = _this.createPagination(responseData.total, _this.limit);
                    }
                    else {
                        _this.pagination = _this.createPagination(data.length, _this.limit);
                    }
                }
                _this.loadFinish = true;
            }
            catch (/** @type {?} */ e) {
                console.log('Error in reading data in ', e);
            }
        }, (function (e) {
            _this.loadFinish = true;
        }));
    };
    /**
     * @return {?}
     */
    FlxUiDatatableService.prototype.cancelLoading = /**
     * @return {?}
     */
    function () {
        this.loader.unsubscribe();
    };
    //Set source key to read from payload response JSON
    /**
     * @param {?} srcKey
     * @return {?}
     */
    FlxUiDatatableService.prototype.setDataSrcKey = /**
     * @param {?} srcKey
     * @return {?}
     */
    function (srcKey) {
        this.dataSrcKey = srcKey;
    };
    /**
     * @return {?}
     */
    FlxUiDatatableService.prototype.getDataLength = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.flxData.subscribe(function (resp) {
                resolve(resp.length);
            }, (function (e) {
                resolve(0);
            }));
        });
    };
    FlxUiDatatableService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    FlxUiDatatableService.ctorParameters = function () { return [
        { type: Http }
    ]; };
    return FlxUiDatatableService;
}());
export { FlxUiDatatableService };
function FlxUiDatatableService_tsickle_Closure_declarations() {
    /** @type {?} */
    FlxUiDatatableService.prototype.dataUrl;
    /** @type {?} */
    FlxUiDatatableService.prototype.behavior;
    /** @type {?} */
    FlxUiDatatableService.prototype.flxData;
    /** @type {?} */
    FlxUiDatatableService.prototype.pagination;
    /** @type {?} */
    FlxUiDatatableService.prototype.totalItems;
    /** @type {?} */
    FlxUiDatatableService.prototype.dataOffset;
    /** @type {?} */
    FlxUiDatatableService.prototype.limit;
    /** @type {?} */
    FlxUiDatatableService.prototype.dataSrcKey;
    /** @type {?} */
    FlxUiDatatableService.prototype.multipleDeletion;
    /** @type {?} */
    FlxUiDatatableService.prototype.loader;
    /** @type {?} */
    FlxUiDatatableService.prototype.loadFinish;
    /** @type {?} */
    FlxUiDatatableService.prototype.lazyloadingConfig;
    /** @type {?} */
    FlxUiDatatableService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,